"""
\defgroup Logging
This is a standalone tool for reading and interpreting the json log files
generated by the logger.
It puts the json data into a Pandas dataframe for easy anaylisis.
"""
import pandas as pd
import os
from math import floor


class Analyzer:
    """
    Class for analyzing the log files in JSON format produced by the DlxLogger

    Returns:
        [type]: [description]
    """

    _files = []
    _df = None

    def __init__(self, files=[]):
        """
        Constructor

        Args:
            files (list, optional): array of filenames contained in the logs dir. Defaults to [].
        """
        self._files = files
        self._df = self._read_log_files(files)
        self._df = self._process_df(self._df)

    def _read_log_files(self, files=[], dirr='logs/'):
        """
        Read log files and return a dataframe

        Args:
            files (list, optional): [description]. Defaults to [].
            dirr (str, optional): [description]. Defaults to 'logs/'.

        Returns:
            [type]: [description]
        """
        frames = []
        for thefile in files:
            fullpath = os.path.dirname(__file__) + '/../../' + dirr + thefile
            print(fullpath)
            frames.append(pd.read_json(fullpath, lines=True))
        return pd.concat(frames)

    def _process_df(self, df):
        """

        Args:
            df ([type]): [description]

        Returns:
            [type]: [description]
        """
        df.drop_duplicates()

        self.convertColumns(df, 'date', ['asctime'], ['asctimeDt'])
        self.convertColumns(df, 'datefnum', ['created'], ['createdDt'])
        self.convertColumns(df, 'ms2str', ['relativeCreated'], [
                            'relativeCreatedFormated'])

        df['mselapsed'] = df['relativeCreated'] - \
            df['relativeCreated'].shift(1)

        return df.sort_values(by='created')

    def get_logs_df(self):
        """
        Returns the dataframe containing the logs

        Returns:
            [type]: [description]
        """
        return self._df

    def get_simple_df(self):
        """
        Returns a simplified dataframe with the data

        Returns:
            [type]: [description]
        """
        return self._df[[
            'asctimeDt',
            'relativeCreated',
            'mselapsed',
            'relativeCreatedFormated',
            'levelname',
            'message',
            'funcName',
            'filename',
            'lineno',
            'process'
        ]]

    def convertColumns(self, data, to_type='date', columns=[], newcolmns=None):
        """
        Convert column to another type

        Args:
            data ([type]): Dataframe
            to_type (str, optional): To type date|str|yn|yesno|num|ms2str. Defaults to 'date'.
            columns (list, optional): Array of column. Defaults to [].
            newcolmns ([type], optional): Array of new columns to create, or None if we replace the current one. Defaults to None.
        """
        idx = 0
        for i in columns:
            if to_type == 'date':
                v = pd.to_datetime(data[i], errors='coerce')
            elif to_type == 'datefnum':
                v = data[i].apply(lambda x: int(x*1000000000))
                v = pd.to_datetime(v, errors='coerce')
            elif to_type == 'str':
                v = str(data[i], errors='coerce')
            elif to_type == 'yn':
                v = data[i].apply(lambda x: 1 if x == 'Y' else 0)
            elif to_type == 'yesno':
                v = data[i].apply(lambda x: 1 if x == 'Yes' else 0)
            elif to_type == 'num':
                v = data[i].apply(lambda value: str(
                    value)[-1:]+str(value)[:-1] if str(value)[-1:] == '-' else str(value))
                v = pd.to_numeric(data[i], errors='coerce').fillna(0)
            elif to_type == 'ms2str':
                v = data[i].apply(lambda x: str(str(floor(x/1000/60/60)) + ' h ' + str(floor(x/1000/60) - floor(
                    x/1000/60/60)*60) + ' min ' + str(floor(x/1000) - floor(x/1000/60)*60) + ' sec'))
            else:
                print('Error type unknown: use date | str | yn | yesno | num')
            if newcolmns == None:
                data[i] = v
            else:
                data[newcolmns[idx]] = v
            idx = idx+1
